// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", "sqlserver", "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for Gender
enum Gender {
  MENS
  WOMENS
  UNISEX
}

// Enum for Watch Condition
enum Condition {
  NEW
  UNWORN
  MINT
  EXCELLENT
  VERY_GOOD
  GOOD
  VINTAGE
}

// Enum for Box/Papers Status
enum ItemInclusion {
  ORIGINAL
  GENERIC
  SERVICE_PAPERS // For papers
  WARRANTY_CARD // For papers
  NONE
}

// Enum for Availability Status
enum AvailabilityStatus {
  IN_STOCK
  OUT_OF_STOCK
  ON_ORDER
}

// Enum for Product Visibility Status
enum ProductStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

// Enum for Movement Type
enum MovementType {
  AUTOMATIC
  MANUAL_WINDING
  QUARTZ
  SPRING_DRIVE
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  logoUrl     String?
  description String?
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Material {
  id               String    @id @default(cuid())
  name             String    @unique // e.g., Stainless Steel, Oystersteel, 18k Yellow Gold, Sapphire Crystal, Leather, White Rolesor
  productsCase     Product[] @relation("CaseMaterial")
  productsCrystal  Product[] @relation("CrystalMaterial")
  productsBezel    Product[] @relation("BezelMaterial")
  productsBracelet Product[] @relation("BraceletStrapMaterial")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Color {
  id               String    @id @default(cuid())
  name             String    @unique // e.g., Black, Silver, Blue, Rose Gold
  hexCode          String? // Optional: for UI display
  productsDial     Product[] @relation("DialColor")
  productsBracelet Product[] @relation("BraceletStrapColor")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model WatchStyle {
  id        String    @id @default(cuid())
  name      String    @unique // e.g., Dress, Sports, Dive, Pilot, Casual
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ClaspType {
  id        String    @id @default(cuid())
  name      String    @unique // e.g., Deployment Clasp, Tang Buckle, Folding Oysterclasp
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Complication {
  id        String    @id @default(cuid())
  name      String    @unique // e.g., Chronograph, Date, GMT, Moonphase, Perpetual Calendar, Tourbillon
  products  Product[] @relation("ProductComplications") // Many-to-many relation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String // URL or path to the image
  thumbImg  String? // URL for thumbnail image
  hoverImg  String? // URL for hover state image
  coverImg  String? // URL for cover/featured image
  altText   String? // Alt text for accessibility
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isPrimary Boolean  @default(false) // To mark a primary image
  order     Int? // For ordering images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Product {
  id               String   @id @default(cuid())
  name             String
  brandId          String
  brand            Brand    @relation(fields: [brandId], references: [id])
  modelNumber      String   @unique
  sku              String?  @unique
  descriptionShort String?
  descriptionLong  String?
  price            Decimal  @db.Decimal(12, 2) // Example: 12 digits, 2 decimal places
  discountPrice    Decimal? @db.Decimal(12, 2)
  currency         String   @default("USD")

  gender           Gender?
  watchStyleId     String?
  watchStyle       WatchStyle? @relation(fields: [watchStyleId], references: [id])
  collectionSeries String? // e.g., Datejust, Seamaster Planet Ocean

  // Physical Attributes & Specifics from Product Page
  caseMaterialId      String?
  caseMaterial        Material? @relation("CaseMaterial", fields: [caseMaterialId], references: [id])
  caseMaterialDetails String? // e.g., "White Rolesor - combination of Oystersteel and 18 ct white gold"
  caseDiameterMm      Decimal?  @db.Decimal(5, 2)
  caseThicknessMm     Decimal?  @db.Decimal(5, 2)
  caseShape           String? // e.g., Round, Square
  caseBack            String? // e.g., Solid, Exhibition
  waterResistanceM    String? // e.g., "100m / 10 ATM"

  dialColorId     String?
  dialColor       Color?  @relation("DialColor", fields: [dialColorId], references: [id])
  dialTypeMarkers String? // e.g., Sunburst, Matte, Guilloch√©, Indexes, Arabic Numerals
  dialDetails     String? // e.g., "18 ct gold hour markers"

  crystalMaterialId String?
  crystalMaterial   Material? @relation("CrystalMaterial", fields: [crystalMaterialId], references: [id])
  crystalFeatures   String? // e.g., "Cyclops lens over the date"

  bezelMaterialId  String?
  bezelMaterial    Material? @relation("BezelMaterial", fields: [bezelMaterialId], references: [id])
  bezelType        String? // e.g., Fixed, Unidirectional Rotating
  bezelDescription String? // e.g., "Fluted", "Tachymeter Scale"

  braceletStrapMaterialId  String?
  braceletStrapMaterial    Material? @relation("BraceletStrapMaterial", fields: [braceletStrapMaterialId], references: [id])
  braceletStrapColorId     String?
  braceletStrapColor       Color?    @relation("BraceletStrapColor", fields: [braceletStrapColorId], references: [id])
  braceletStyleDescription String? // e.g., "Oyster, flat three-piece links", "Jubilee, five-piece links"

  claspTypeId  String?
  claspType    ClaspType? @relation(fields: [claspTypeId], references: [id])
  claspDetails String? // e.g., "Folding Oysterclasp with Easylink 5 mm comfort extension link"
  lugWidthMm   Int?

  crownDetails String? // e.g., "Screw-down, Twinlock double waterproofness system"

  // Movement Details
  movementType      MovementType?
  movementCaliber   String? // e.g., "Calibre 3235"
  powerReserveHours String? // e.g., "Approximately 70 hours"
  numberOfJewels    Int?
  complications     Complication[] @relation("ProductComplications")

  // Condition & Provenance
  condition         Condition?
  yearOfManufacture String? // Can be Int or String like "Circa 1995"
  purchaseYear      Int? // Specific to pre-owned items if known
  box               ItemInclusion? @default(NONE)
  papers            ItemInclusion? @default(NONE)
  warrantyDetails   String? // e.g., "5 Years International Warranty from [Date]", "1-Year Store Warranty"
  certifications    String[] // e.g., ["Superlative Chronometer (COSC + Rolex certification after casing)"]

  // Origin & Manufacturer Info
  countryOfOrigin     String? // e.g., "Switzerland"
  manufacturerDetails String?
  packerDetails       String?
  importerDetails     String?

  // Media
  images   ProductImage[]
  videoUrl String?

  // Inventory & Status
  stockQuantity      Int                @default(0)
  availabilityStatus AvailabilityStatus @default(IN_STOCK)
  isFeatured         Boolean            @default(false)
  status             ProductStatus      @default(DRAFT)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  slug            String  @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brandId])
  @@index([watchStyleId])
  @@index([caseMaterialId])
  @@index([dialColorId])
  @@index([movementType])
  @@index([price])
  @@index([status])
  @@index([isFeatured])
  @@index([modelNumber])
  @@index([collectionSeries])
}
